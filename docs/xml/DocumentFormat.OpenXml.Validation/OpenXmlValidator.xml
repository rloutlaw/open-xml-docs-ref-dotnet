<Type Name="OpenXmlValidator" FullName="DocumentFormat.OpenXml.Validation.OpenXmlValidator">
  <TypeSignature Language="C#" Value="public class OpenXmlValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OpenXmlValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Validation.OpenXmlValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class OpenXmlValidator" />
  <TypeSignature Language="F#" Value="type OpenXmlValidator = class" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
    <AssemblyVersion>2.12.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Defines the OpenXmlValidator.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OpenXmlValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Validation.OpenXmlValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.Validation.OpenXmlValidator" />.
            </summary>
        <remarks>
            Defaults to <see cref="F:DocumentFormat.OpenXml.FileFormatVersions.Office2007" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OpenXmlValidator (DocumentFormat.OpenXml.FileFormatVersions fileFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype DocumentFormat.OpenXml.FileFormatVersions fileFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Validation.OpenXmlValidator.#ctor(DocumentFormat.OpenXml.FileFormatVersions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileFormat As FileFormatVersions)" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Validation.OpenXmlValidator : DocumentFormat.OpenXml.FileFormatVersions -&gt; DocumentFormat.OpenXml.Validation.OpenXmlValidator" Usage="new DocumentFormat.OpenXml.Validation.OpenXmlValidator fileFormat" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileFormat" Type="DocumentFormat.OpenXml.FileFormatVersions" />
      </Parameters>
      <Docs>
        <param name="fileFormat">The target file format to be validated against.</param>
        <summary>
            Initializes a new instance of the <see cref="T:DocumentFormat.OpenXml.Validation.OpenXmlValidator" />.
            </summary>
        <remarks>
            Default to FileFormat.Office2007.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="fileFormat" /> parameter is not a known format.</exception>
      </Docs>
    </Member>
    <Member MemberName="FileFormat">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.FileFormatVersions FileFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype DocumentFormat.OpenXml.FileFormatVersions FileFormat" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Validation.OpenXmlValidator.FileFormat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileFormat As FileFormatVersions" />
      <MemberSignature Language="F#" Value="member this.FileFormat : DocumentFormat.OpenXml.FileFormatVersions" Usage="DocumentFormat.OpenXml.Validation.OpenXmlValidator.FileFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.FileFormatVersions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the target file format to be validated against.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxNumberOfErrors">
      <MemberSignature Language="C#" Value="public int MaxNumberOfErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxNumberOfErrors" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Validation.OpenXmlValidator.MaxNumberOfErrors" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxNumberOfErrors As Integer" />
      <MemberSignature Language="F#" Value="member this.MaxNumberOfErrors : int with get, set" Usage="DocumentFormat.OpenXml.Validation.OpenXmlValidator.MaxNumberOfErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the maximum number of errors the OpenXmlValidator will return.
            Default is <c>1000</c>. A <c>0</c> value means no limitation.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Throw when the value set is less than zero.</exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt; Validate (DocumentFormat.OpenXml.OpenXmlElement openXmlElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt; Validate(class DocumentFormat.OpenXml.OpenXmlElement openXmlElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Validation.OpenXmlValidator.Validate(DocumentFormat.OpenXml.OpenXmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function Validate (openXmlElement As OpenXmlElement) As IEnumerable(Of ValidationErrorInfo)" />
      <MemberSignature Language="F#" Value="member this.Validate : DocumentFormat.OpenXml.OpenXmlElement -&gt; seq&lt;DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt;" Usage="openXmlValidator.Validate openXmlElement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openXmlElement" Type="DocumentFormat.OpenXml.OpenXmlElement" />
      </Parameters>
      <Docs>
        <param name="openXmlElement">The target OpenXmlElement.</param>
        <summary>
            Validates the specified element.
            </summary>
        <returns>A set of validation errors.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="openXmlElement" /> parameter is null.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="openXmlElement" /> is type of <see cref="T:DocumentFormat.OpenXml.OpenXmlUnknownElement" />, <see cref="T:DocumentFormat.OpenXml.OpenXmlMiscNode" />, <see cref="T:DocumentFormat.OpenXml.AlternateContent" />, <see cref="T:DocumentFormat.OpenXml.AlternateContentChoice" /> or <see cref="T:DocumentFormat.OpenXml.AlternateContentFallback" />.</exception>
        <exception cref="T:System.InvalidOperationException">Thrown when the <paramref name="openXmlElement" /> is not defined in the specified <see cref="P:DocumentFormat.OpenXml.Validation.OpenXmlValidator.FileFormat" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt; Validate (DocumentFormat.OpenXml.Packaging.OpenXmlPackage openXmlPackage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt; Validate(class DocumentFormat.OpenXml.Packaging.OpenXmlPackage openXmlPackage) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Validation.OpenXmlValidator.Validate(DocumentFormat.OpenXml.Packaging.OpenXmlPackage)" />
      <MemberSignature Language="VB.NET" Value="Public Function Validate (openXmlPackage As OpenXmlPackage) As IEnumerable(Of ValidationErrorInfo)" />
      <MemberSignature Language="F#" Value="member this.Validate : DocumentFormat.OpenXml.Packaging.OpenXmlPackage -&gt; seq&lt;DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt;" Usage="openXmlValidator.Validate openXmlPackage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openXmlPackage" Type="DocumentFormat.OpenXml.Packaging.OpenXmlPackage" />
      </Parameters>
      <Docs>
        <param name="openXmlPackage">The target <see cref="T:DocumentFormat.OpenXml.Packaging.WordprocessingDocument" />, <see cref="T:DocumentFormat.OpenXml.Packaging.SpreadsheetDocument" /> or <see cref="T:DocumentFormat.OpenXml.Packaging.PresentationDocument" />.</param>
        <summary>
            Validates the specified document.
            </summary>
        <returns>A set of validation errors.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="openXmlPackage" /> parameter is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt; Validate (DocumentFormat.OpenXml.Packaging.OpenXmlPart openXmlPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt; Validate(class DocumentFormat.OpenXml.Packaging.OpenXmlPart openXmlPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Validation.OpenXmlValidator.Validate(DocumentFormat.OpenXml.Packaging.OpenXmlPart)" />
      <MemberSignature Language="VB.NET" Value="Public Function Validate (openXmlPart As OpenXmlPart) As IEnumerable(Of ValidationErrorInfo)" />
      <MemberSignature Language="F#" Value="member this.Validate : DocumentFormat.OpenXml.Packaging.OpenXmlPart -&gt; seq&lt;DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt;" Usage="openXmlValidator.Validate openXmlPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openXmlPart" Type="DocumentFormat.OpenXml.Packaging.OpenXmlPart" />
      </Parameters>
      <Docs>
        <param name="openXmlPart">The target OpenXmlPart.</param>
        <summary>
            Validates the specified content in the <paramref name="openXmlPart" />.
            </summary>
        <returns>A set of validation errors.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="openXmlPart" /> parameter is null.</exception>
        <exception cref="T:System.InvalidOperationException">Throw when the specified part is not a defined part in the specified <see cref="P:DocumentFormat.OpenXml.Validation.OpenXmlValidator.FileFormat" /> version.</exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt; Validate (DocumentFormat.OpenXml.OpenXmlElement openXmlElement, System.Threading.CancellationToken token = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt; Validate(class DocumentFormat.OpenXml.OpenXmlElement openXmlElement, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Validation.OpenXmlValidator.Validate(DocumentFormat.OpenXml.OpenXmlElement,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Validate (openXmlElement As OpenXmlElement, Optional token As CancellationToken = Nothing) As IEnumerable(Of ValidationErrorInfo)" />
      <MemberSignature Language="F#" Value="member this.Validate : DocumentFormat.OpenXml.OpenXmlElement * System.Threading.CancellationToken -&gt; seq&lt;DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt;" Usage="openXmlValidator.Validate (openXmlElement, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openXmlElement" Type="DocumentFormat.OpenXml.OpenXmlElement" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="openXmlElement">The target OpenXmlElement.</param>
        <param name="token">Cancellation token</param>
        <summary>
            Validates the specified element.
            </summary>
        <returns>A set of validation errors.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="openXmlElement" /> parameter is null.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="openXmlElement" /> is type of <see cref="T:DocumentFormat.OpenXml.OpenXmlUnknownElement" />, <see cref="T:DocumentFormat.OpenXml.OpenXmlMiscNode" />, <see cref="T:DocumentFormat.OpenXml.AlternateContent" />, <see cref="T:DocumentFormat.OpenXml.AlternateContentChoice" /> or <see cref="T:DocumentFormat.OpenXml.AlternateContentFallback" />.</exception>
        <exception cref="T:System.InvalidOperationException">Thrown when the <paramref name="openXmlElement" /> is not defined in the specified <see cref="P:DocumentFormat.OpenXml.Validation.OpenXmlValidator.FileFormat" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt; Validate (DocumentFormat.OpenXml.Packaging.OpenXmlPackage openXmlPackage, System.Threading.CancellationToken token = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt; Validate(class DocumentFormat.OpenXml.Packaging.OpenXmlPackage openXmlPackage, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Validation.OpenXmlValidator.Validate(DocumentFormat.OpenXml.Packaging.OpenXmlPackage,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Validate (openXmlPackage As OpenXmlPackage, Optional token As CancellationToken = Nothing) As IEnumerable(Of ValidationErrorInfo)" />
      <MemberSignature Language="F#" Value="member this.Validate : DocumentFormat.OpenXml.Packaging.OpenXmlPackage * System.Threading.CancellationToken -&gt; seq&lt;DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt;" Usage="openXmlValidator.Validate (openXmlPackage, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openXmlPackage" Type="DocumentFormat.OpenXml.Packaging.OpenXmlPackage" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="openXmlPackage">The target <see cref="T:DocumentFormat.OpenXml.Packaging.WordprocessingDocument" />, <see cref="T:DocumentFormat.OpenXml.Packaging.SpreadsheetDocument" /> or <see cref="T:DocumentFormat.OpenXml.Packaging.PresentationDocument" />.</param>
        <param name="token">Cancellation token</param>
        <summary>
            Validates the specified document.
            </summary>
        <returns>A set of validation errors.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="openXmlPackage" /> parameter is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt; Validate (DocumentFormat.OpenXml.Packaging.OpenXmlPart openXmlPart, System.Threading.CancellationToken token = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt; Validate(class DocumentFormat.OpenXml.Packaging.OpenXmlPart openXmlPart, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Validation.OpenXmlValidator.Validate(DocumentFormat.OpenXml.Packaging.OpenXmlPart,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Validate (openXmlPart As OpenXmlPart, Optional token As CancellationToken = Nothing) As IEnumerable(Of ValidationErrorInfo)" />
      <MemberSignature Language="F#" Value="member this.Validate : DocumentFormat.OpenXml.Packaging.OpenXmlPart * System.Threading.CancellationToken -&gt; seq&lt;DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt;" Usage="openXmlValidator.Validate (openXmlPart, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.Validation.ValidationErrorInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openXmlPart" Type="DocumentFormat.OpenXml.Packaging.OpenXmlPart" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="openXmlPart">The target OpenXmlPart.</param>
        <param name="token">Cancellation token</param>
        <summary>
            Validates the specified content in the <paramref name="openXmlPart" />.
            </summary>
        <returns>A set of validation errors.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="openXmlPart" /> parameter is null.</exception>
        <exception cref="T:System.InvalidOperationException">Throw when the specified part is not a defined part in the specified <see cref="P:DocumentFormat.OpenXml.Validation.OpenXmlValidator.FileFormat" /> version.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
